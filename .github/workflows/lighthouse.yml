name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10
        env:
          PORT: 4321

      - name: Run Lighthouse CI
        run: |
          npx lhci autorun --collect.settings.chromeFlags="--headless" --collect.settings.emulatedFormFactor=mobile
          npx lhci autorun --collect.settings.chromeFlags="--headless" --collect.settings.emulatedFormFactor=desktop
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the latest lighthouse results
            const resultsPath = '.lighthouseci';
            if (!fs.existsSync(resultsPath)) {
              console.log('No lighthouse results found');
              return;
            }
            
            const files = fs.readdirSync(resultsPath);
            const jsonFiles = files.filter(file => file.endsWith('.json'));
            
            if (jsonFiles.length === 0) {
              console.log('No JSON results found');
              return;
            }
            
            // Read the most recent result
            const latestFile = jsonFiles.sort().pop();
            const results = JSON.parse(fs.readFileSync(path.join(resultsPath, latestFile), 'utf8'));
            
            // Extract scores
            const scores = results.categories;
            const performance = Math.round(scores.performance.score * 100);
            const accessibility = Math.round(scores.accessibility.score * 100);
            const bestPractices = Math.round(scores['best-practices'].score * 100);
            const seo = Math.round(scores.seo.score * 100);
            
            // Create comment
            const comment = `## ðŸš€ Lighthouse CI Results
            
            | Category | Score |
            |----------|-------|
            | Performance | ${performance}/100 |
            | Accessibility | ${accessibility}/100 |
            | Best Practices | ${bestPractices}/100 |
            | SEO | ${seo}/100 |
            
            ðŸ“Š [View detailed reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

